{"ast":null,"code":"var _jsxFileName = \"/Users/ming/Desktop/workspace/gongsa/src/components/Register.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { dbService, storageService } from \"../fbase\";\nimport { collection, addDoc } from \"firebase/firestore\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport EXIF from \"exif-js\";\nimport { ref, uploadString, getDownloadURL } from \"firebase/storage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Register = _ref => {\n  _s();\n\n  let {\n    userObj\n  } = _ref;\n  const [gongsa, setGongsa] = useState(\"\");\n  const [gongsas, setGongsas] = useState([]);\n  const [attachment, setAttachment] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [la, setLa] = useState([]);\n  const [long, setLong] = useState([]); // const [meta, setMeta] = useState(\"\"); //metadata\n\n  const meta = useRef(null);\n\n  const onSubmit = async event => {\n    event.preventDefault();\n    let attachmentUrl = \"\";\n\n    if (attachment !== \"\") {\n      const attachmentRef = ref(storageService, `${userObj.uid}/${uuidv4()}`);\n      const response = await uploadString(attachmentRef, attachment, \"data_url\");\n      attachmentUrl = await getDownloadURL(response.ref);\n    }\n\n    const gongsaObj = {\n      text: gongsa,\n      createdAt: meta.exifdata.DateTime,\n      createdId: userObj.uid,\n      attachmentUrl // phoneNumber,\n\n    };\n    await addDoc(collection(dbService, \"gongsa\"), gongsaObj);\n    setGongsa(\"\");\n    setAttachment(\"\");\n  };\n\n  const onChange = event => {\n    const {\n      target: {\n        value\n      }\n    } = event;\n    setGongsa(value);\n  };\n\n  const onFileChange = event => {\n    const {\n      target: {\n        files\n      }\n    } = event;\n    const theFile = files[0];\n    const reader = new FileReader();\n\n    reader.onloadend = finishedEvent => {\n      const {\n        currentTarget: {\n          result\n        }\n      } = finishedEvent;\n      setAttachment(result);\n    };\n\n    reader.readAsDataURL(theFile); //메타데이터 console\n\n    if (theFile && theFile.name) {\n      EXIF.getData(theFile, function () {\n        let exifData = EXIF.pretty(this);\n        let gpsLa = EXIF.getTag(this, \"GPSLatitude\");\n        let gpsLong = EXIF.getTag(this, \"GPSLongitude\");\n\n        if (exifData) {\n          console.log(exifData);\n          console.log(gpsLa);\n          console.log(gpsLong);\n          let test = gpsLa[0];\n          console.log(test.numerator); // console.log(EXIF.getTag(this, \"Orientation\"));\n          // setMeta(theFile); //file metadata\n\n          setDate(EXIF.getTag(this, \"DateTime\")); // setGPSLa(\n          //   parseInt(la[0]) + (60 * parseInt(la[1]) + parseFloat(la[2])) / 3600\n          // );\n          // setGPSLong(long[0] + (60 * long[1] + parseFloat(long[2])) / 3600);\n          // meta.current = theFile;\n          // // const metaArray = [];\n          // // for (const element of meta.current.exifdata.GPSLongitude) {\n          // //   metaArray.push(parseFloat(Object.values(element)[0]));\n          // //   console.log(metaArray);\n        } else {\n          console.log(\"No EXIF data found in image '\" + theFile.name + \"'.\");\n        }\n      });\n    }\n  };\n\n  const onClearAttachment = () => {\n    setAttachment(null);\n    fileInput.current.value = null;\n  };\n\n  const fileInput = useRef();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uBBFC\\uC815\\uC528 Component\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: gongsa,\n        onChange: onChange,\n        type: \"text\",\n        placeholder: \"\\uACF5\\uC0AC \\uC815\\uBCF4 \\uC785\\uB825\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: onFileChange,\n        ref: fileInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), attachment && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: attachment,\n          width: \"50px\",\n          height: \"50px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClearAttachment,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), console.log(meta), date]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}; //ref 조건 별 위경도 계산\n\n\n_s(Register, \"ke0ZNdJXb53YGsx1baNk9hb8PLU=\");\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/ming/Desktop/workspace/gongsa/src/components/Register.js"],"names":["React","useEffect","useRef","useState","dbService","storageService","collection","addDoc","v4","uuidv4","EXIF","ref","uploadString","getDownloadURL","Register","userObj","gongsa","setGongsa","gongsas","setGongsas","attachment","setAttachment","date","setDate","la","setLa","long","setLong","meta","onSubmit","event","preventDefault","attachmentUrl","attachmentRef","uid","response","gongsaObj","text","createdAt","exifdata","DateTime","createdId","onChange","target","value","onFileChange","files","theFile","reader","FileReader","onloadend","finishedEvent","currentTarget","result","readAsDataURL","name","getData","exifData","pretty","gpsLa","getTag","gpsLong","console","log","test","numerator","onClearAttachment","fileInput","current"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { dbService, storageService } from \"../fbase\";\nimport { collection, addDoc } from \"firebase/firestore\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport EXIF from \"exif-js\";\nimport { ref, uploadString, getDownloadURL } from \"firebase/storage\";\n\nconst Register = ({ userObj }) => {\n  const [gongsa, setGongsa] = useState(\"\");\n  const [gongsas, setGongsas] = useState([]);\n  const [attachment, setAttachment] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [la, setLa] = useState([]);\n  const [long, setLong] = useState([]);\n\n  // const [meta, setMeta] = useState(\"\"); //metadata\n  const meta = useRef(null);\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    let attachmentUrl = \"\";\n\n    if (attachment !== \"\") {\n      const attachmentRef = ref(storageService, `${userObj.uid}/${uuidv4()}`);\n      const response = await uploadString(\n        attachmentRef,\n        attachment,\n        \"data_url\"\n      );\n      attachmentUrl = await getDownloadURL(response.ref);\n    }\n\n    const gongsaObj = {\n      text: gongsa,\n      createdAt: meta.exifdata.DateTime,\n      createdId: userObj.uid,\n      attachmentUrl,\n      // phoneNumber,\n    };\n    await addDoc(collection(dbService, \"gongsa\"), gongsaObj);\n    setGongsa(\"\");\n    setAttachment(\"\");\n  };\n\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setGongsa(value);\n  };\n\n  const onFileChange = (event) => {\n    const {\n      target: { files },\n    } = event;\n    const theFile = files[0];\n    const reader = new FileReader();\n    reader.onloadend = (finishedEvent) => {\n      const {\n        currentTarget: { result },\n      } = finishedEvent;\n      setAttachment(result);\n    };\n    reader.readAsDataURL(theFile);\n    //메타데이터 console\n    if (theFile && theFile.name) {\n      EXIF.getData(theFile, function () {\n        let exifData = EXIF.pretty(this);\n        let gpsLa = EXIF.getTag(this, \"GPSLatitude\");\n        let gpsLong = EXIF.getTag(this, \"GPSLongitude\");\n\n        if (exifData) {\n          console.log(exifData);\n          console.log(gpsLa);\n          console.log(gpsLong);\n          let test = gpsLa[0];\n          console.log(test.numerator);\n          // console.log(EXIF.getTag(this, \"Orientation\"));\n          // setMeta(theFile); //file metadata\n          setDate(EXIF.getTag(this, \"DateTime\"));\n          // setGPSLa(\n          //   parseInt(la[0]) + (60 * parseInt(la[1]) + parseFloat(la[2])) / 3600\n          // );\n          // setGPSLong(long[0] + (60 * long[1] + parseFloat(long[2])) / 3600);\n          // meta.current = theFile;\n          // // const metaArray = [];\n\n          // // for (const element of meta.current.exifdata.GPSLongitude) {\n          // //   metaArray.push(parseFloat(Object.values(element)[0]));\n          // //   console.log(metaArray);\n        } else {\n          console.log(\"No EXIF data found in image '\" + theFile.name + \"'.\");\n        }\n      });\n    }\n  };\n\n  const onClearAttachment = () => {\n    setAttachment(null);\n    fileInput.current.value = null;\n  };\n\n  const fileInput = useRef();\n\n  return (\n    <div>\n      <h2>민정씨 Component</h2>\n      <form onSubmit={onSubmit}>\n        <input\n          value={gongsa}\n          onChange={onChange}\n          type=\"text\"\n          placeholder=\"공사 정보 입력\"\n        />\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={onFileChange}\n          ref={fileInput}\n        />\n        <input type=\"submit\" value=\"submit\" />\n        {attachment && (\n          <div>\n            <img src={attachment} width=\"50px\" height=\"50px\" />\n            <button onClick={onClearAttachment}>Clear</button>\n          </div>\n        )}\n        {console.log(meta)}\n        {date}\n        {/* {parseInt(GPSLa)} */}\n      </form>\n    </div>\n  );\n};\n\n//ref 조건 별 위경도 계산\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}