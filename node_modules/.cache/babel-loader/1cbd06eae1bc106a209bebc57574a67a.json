{"ast":null,"code":"var _jsxFileName = \"/Users/ming/Desktop/workspace/gongsa/src/components/Register.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { dbService, storageService } from \"../fbase\";\nimport { collection, addDoc } from \"firebase/firestore\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport EXIF from \"exif-js\";\nimport { ref, uploadString, getDownloadURL } from \"firebase/storage\";\nimport Geocode from \"react-geocode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nGeocode.setApiKey(process.env.REACT_APP_GOOGLE_API_KEY);\nGeocode.setLanguage(\"ko\");\nGeocode.setRegion(\"kr\");\nGeocode.enableDebug(); //geocode 작업 필요\n\nconst Register = _ref => {\n  _s();\n\n  let {\n    userObj\n  } = _ref;\n  const [gongsa, setGongsa] = useState(\"\");\n  const [gongsas, setGongsas] = useState([]);\n  const [attachment, setAttachment] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [GPSla, setGPSLa] = useState([]);\n  const [GPSlong, setGPSLong] = useState([]); // const [meta, setMeta] = useState(\"\"); //metadata\n\n  const meta = useRef(null);\n\n  const onSubmit = async event => {\n    event.preventDefault();\n    let attachmentUrl = \"\";\n\n    if (attachment !== \"\") {\n      const attachmentRef = ref(storageService, `${userObj.uid}/${uuidv4()}`);\n      const response = await uploadString(attachmentRef, attachment, \"data_url\");\n      attachmentUrl = await getDownloadURL(response.ref);\n    }\n\n    const gongsaObj = {\n      text: gongsa,\n      createdAt: meta.exifdata.DateTime,\n      createdId: userObj.uid,\n      attachmentUrl // 필드 태그 수정 필요(Ex. phoneNumber .. etc)\n\n    };\n    await addDoc(collection(dbService, \"gongsa\"), gongsaObj);\n    setGongsa(\"\");\n    setAttachment(\"\");\n  };\n\n  const onChange = event => {\n    const {\n      target: {\n        value\n      }\n    } = event;\n    setGongsa(value);\n  };\n\n  const onFileChange = event => {\n    const {\n      target: {\n        files\n      }\n    } = event;\n    const theFile = files[0];\n    const reader = new FileReader();\n\n    reader.onloadend = finishedEvent => {\n      const {\n        currentTarget: {\n          result\n        }\n      } = finishedEvent;\n      setAttachment(result);\n    };\n\n    reader.readAsDataURL(theFile); //메타데이터 console\n\n    if (theFile && theFile.name) {\n      EXIF.getData(theFile, function () {\n        let exifData = EXIF.pretty(this);\n        let gpsLa = EXIF.getTag(this, \"GPSLatitude\");\n        let gpsLaRef = EXIF.getTag(this, \"GPSLatitudeRef\");\n        let gpsLong = EXIF.getTag(this, \"GPSLongitude\");\n        let gpsLongRef = EXIF.getTag(this, \"GPSLongitudeRef\");\n        let la = [];\n        let long = [];\n\n        if (exifData) {\n          //exifdata 존재 시 gps 계산 수행\n          console.log(exifData);\n          console.log(gpsLa);\n          console.log(gpsLong);\n\n          for (let i = 0; i < gpsLa.length; i++) {\n            la[i] = gpsLa[i].numerator / gpsLa[i].denominator;\n          }\n\n          for (let i = 0; i < gpsLong.length; i++) {\n            long[i] = gpsLong[i].numerator / gpsLong[i].denominator;\n          } //값 확인 콘솔\n\n\n          console.log(la, long, gpsLaRef, gpsLongRef); //statedata 설정\n\n          setDate(EXIF.getTag(this, \"DateTime\")); //ref 조건 별 위경도 계산\n\n          if (gpsLaRef == \"N\") {\n            setGPSLa(parseInt(la[0]) + (60 * parseInt(la[1]) + parseFloat(la[2])) / 3600);\n          } else {\n            setGPSLa(-1 * parseInt(la[0]) + (-60 * parseInt(la[1]) + -1 * parseFloat(la[2])) / 3600);\n          }\n\n          if (gpsLongRef == \"E\") {\n            setGPSLong(parseInt(long[0]) + (60 * parseInt(long[1]) + parseFloat(long[2])) / 3600);\n          } else {\n            setGPSLong(-1 * parseInt(long[0]) + (-60 * parseInt(long[1]) + -1 * parseFloat(long[2])) / 3600);\n          }\n        } else {\n          console.log(\"No EXIF data found in image '\" + theFile.name + \"'.\");\n        }\n      });\n    }\n  };\n\n  const onClearAttachment = () => {\n    setAttachment(null);\n    fileInput.current.value = null;\n  };\n\n  const fileInput = useRef();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uBBFC\\uC815\\uC528 Component\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: gongsa,\n        onChange: onChange,\n        type: \"text\",\n        placeholder: \"\\uACF5\\uC0AC \\uC815\\uBCF4 \\uC785\\uB825\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: onFileChange,\n        ref: fileInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), attachment && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: attachment,\n          width: \"50px\",\n          height: \"50px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClearAttachment,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this), console.log(meta), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), \"Time : \", date, /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), \"GPSLatitude : \", GPSla, /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), \"GPSLongitude : \", GPSlong]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Register, \"xAp5f6uvA9+dkQ3xamCjlb7YZr8=\");\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/ming/Desktop/workspace/gongsa/src/components/Register.js"],"names":["React","useEffect","useRef","useState","dbService","storageService","collection","addDoc","v4","uuidv4","EXIF","ref","uploadString","getDownloadURL","Geocode","setApiKey","process","env","REACT_APP_GOOGLE_API_KEY","setLanguage","setRegion","enableDebug","Register","userObj","gongsa","setGongsa","gongsas","setGongsas","attachment","setAttachment","date","setDate","GPSla","setGPSLa","GPSlong","setGPSLong","meta","onSubmit","event","preventDefault","attachmentUrl","attachmentRef","uid","response","gongsaObj","text","createdAt","exifdata","DateTime","createdId","onChange","target","value","onFileChange","files","theFile","reader","FileReader","onloadend","finishedEvent","currentTarget","result","readAsDataURL","name","getData","exifData","pretty","gpsLa","getTag","gpsLaRef","gpsLong","gpsLongRef","la","long","console","log","i","length","numerator","denominator","parseInt","parseFloat","onClearAttachment","fileInput","current"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { dbService, storageService } from \"../fbase\";\nimport { collection, addDoc } from \"firebase/firestore\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport EXIF from \"exif-js\";\nimport { ref, uploadString, getDownloadURL } from \"firebase/storage\";\nimport Geocode from \"react-geocode\";\n\nGeocode.setApiKey(process.env.REACT_APP_GOOGLE_API_KEY);\nGeocode.setLanguage(\"ko\");\nGeocode.setRegion(\"kr\");\nGeocode.enableDebug();\n\n//geocode 작업 필요\n\nconst Register = ({ userObj }) => {\n  const [gongsa, setGongsa] = useState(\"\");\n  const [gongsas, setGongsas] = useState([]);\n  const [attachment, setAttachment] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [GPSla, setGPSLa] = useState([]);\n  const [GPSlong, setGPSLong] = useState([]);\n\n  // const [meta, setMeta] = useState(\"\"); //metadata\n  const meta = useRef(null);\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    let attachmentUrl = \"\";\n\n    if (attachment !== \"\") {\n      const attachmentRef = ref(storageService, `${userObj.uid}/${uuidv4()}`);\n      const response = await uploadString(\n        attachmentRef,\n        attachment,\n        \"data_url\"\n      );\n      attachmentUrl = await getDownloadURL(response.ref);\n    }\n\n    const gongsaObj = {\n      text: gongsa,\n      createdAt: meta.exifdata.DateTime,\n      createdId: userObj.uid,\n      attachmentUrl,\n      // 필드 태그 수정 필요(Ex. phoneNumber .. etc)\n    };\n    await addDoc(collection(dbService, \"gongsa\"), gongsaObj);\n    setGongsa(\"\");\n    setAttachment(\"\");\n  };\n\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setGongsa(value);\n  };\n\n  const onFileChange = (event) => {\n    const {\n      target: { files },\n    } = event;\n    const theFile = files[0];\n    const reader = new FileReader();\n    reader.onloadend = (finishedEvent) => {\n      const {\n        currentTarget: { result },\n      } = finishedEvent;\n      setAttachment(result);\n    };\n    reader.readAsDataURL(theFile);\n    //메타데이터 console\n    if (theFile && theFile.name) {\n      EXIF.getData(theFile, function () {\n        let exifData = EXIF.pretty(this);\n        let gpsLa = EXIF.getTag(this, \"GPSLatitude\");\n        let gpsLaRef = EXIF.getTag(this, \"GPSLatitudeRef\");\n        let gpsLong = EXIF.getTag(this, \"GPSLongitude\");\n        let gpsLongRef = EXIF.getTag(this, \"GPSLongitudeRef\");\n\n        let la = [];\n        let long = [];\n\n        if (exifData) {\n          //exifdata 존재 시 gps 계산 수행\n          console.log(exifData);\n          console.log(gpsLa);\n          console.log(gpsLong);\n          for (let i = 0; i < gpsLa.length; i++) {\n            la[i] = gpsLa[i].numerator / gpsLa[i].denominator;\n          }\n          for (let i = 0; i < gpsLong.length; i++) {\n            long[i] = gpsLong[i].numerator / gpsLong[i].denominator;\n          }\n          //값 확인 콘솔\n          console.log(la, long, gpsLaRef, gpsLongRef);\n\n          //statedata 설정\n          setDate(EXIF.getTag(this, \"DateTime\"));\n          //ref 조건 별 위경도 계산\n          if (gpsLaRef == \"N\") {\n            setGPSLa(\n              parseInt(la[0]) +\n                (60 * parseInt(la[1]) + parseFloat(la[2])) / 3600\n            );\n          } else {\n            setGPSLa(\n              -1 * parseInt(la[0]) +\n                (-60 * parseInt(la[1]) + -1 * parseFloat(la[2])) / 3600\n            );\n          }\n          if (gpsLongRef == \"E\") {\n            setGPSLong(\n              parseInt(long[0]) +\n                (60 * parseInt(long[1]) + parseFloat(long[2])) / 3600\n            );\n          } else {\n            setGPSLong(\n              -1 * parseInt(long[0]) +\n                (-60 * parseInt(long[1]) + -1 * parseFloat(long[2])) / 3600\n            );\n          }\n        } else {\n          console.log(\"No EXIF data found in image '\" + theFile.name + \"'.\");\n        }\n      });\n    }\n  };\n\n  const onClearAttachment = () => {\n    setAttachment(null);\n    fileInput.current.value = null;\n  };\n\n  const fileInput = useRef();\n\n  return (\n    <div>\n      <h2>민정씨 Component</h2>\n      <form onSubmit={onSubmit}>\n        <input\n          value={gongsa}\n          onChange={onChange}\n          type=\"text\"\n          placeholder=\"공사 정보 입력\"\n        />\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={onFileChange}\n          ref={fileInput}\n        />\n        <input type=\"submit\" value=\"submit\" />\n        {attachment && (\n          <div>\n            <img src={attachment} width=\"50px\" height=\"50px\" />\n            <button onClick={onClearAttachment}>Clear</button>\n          </div>\n        )}\n        {console.log(meta)}\n        <hr />\n        Time : {date}\n        <hr />\n        GPSLatitude : {GPSla}\n        <hr />\n        GPSLongitude : {GPSlong}\n      </form>\n    </div>\n  );\n};\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}