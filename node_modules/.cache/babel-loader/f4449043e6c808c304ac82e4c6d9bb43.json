{"ast":null,"code":"var _jsxFileName = \"/Users/ming/Desktop/workspace/gongsa/src/routes/Auth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { authService } from \"../fbase\";\nimport { RecaptchaVerifier, signInWithPhoneNumber } from \"firebase/auth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Auth = () => {\n  _s();\n\n  const [phoneNumber, setPhonenumber] = useState(\"\");\n  const [codeNumber, setCodeNumber] = useState(\"\");\n  const [isSendSMS, setIsSendSms] = useState(\"\");\n  const appVerifier = window.recaptchaVerifier;\n  const phoneNumberTest = \"+16505551234\";\n  const testVerificationCode = \"123456\";\n\n  const onChanged = event => {\n    const {\n      target: {\n        name,\n        value\n      }\n    } = event;\n\n    if (name === \"phone\") {\n      setPhonenumber(value);\n    } else if (name === \"code\") {\n      setCodeNumber(value);\n    }\n  };\n\n  useEffect(() => {\n    window.recaptchaVerifier = new RecaptchaVerifier(\"recaptcha-container\", {\n      size: \"invisible\",\n      callback: response => {// reCAPTCHA solved, allow signInWithPhoneNumber.\n      }\n    }, authService);\n  }, []);\n\n  const onSubmit = event => {\n    event.preventDefault();\n    authService.languageCode = \"ko\"; // window.recaptchaVerifier = new RecaptchaVerifier(\n    //   \"recaptcha-container\",\n    //   {},\n    //   authService\n    // );\n    // signInWithPhoneNumber(authService, \"+82\" + phoneNumber, appVerifier)\n    //   .then((confirmationResult) => {\n    //     setIsSendSms(true);\n    //     // SMS sent. Prompt user to type the code from the message, then sign the\n    //     // user in with confirmationResult.confirm(code).\n    //     window.confirmationResult = confirmationResult;\n    //     // ...\n    //   })\n    //   .catch((error) => {\n    //     console.log(error);\n    //     // Error; SMS not sent\n    //     // ...\n    //   });\n\n    signInWithPhoneNumber(authService, phoneNumberTest, appVerifier).then(function (confirmationResult) {\n      // confirmationResult can resolve with the fictional testVerificationCode above.\n      return confirmationResult.confirm(testVerificationCode);\n    }).catch(function (error) {// Error; SMS not sent\n      // ...\n    });\n  };\n\n  const onCodeConfirmClick = event => {\n    window.confirmationResult.confirm(codeNumber).then(result => {\n      // User signed in successfully.\n      const user = result.user; //console.log(user);\n      // ...\n    }).catch(error => {//console.log(error);\n      // User couldn't sign in (bad verification code?)\n      // ...\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"phone\",\n        type: \"phone\",\n        placeholder: \"'-' \\uC5C6\\uC774 \\uC785\\uB825\",\n        required: true,\n        value: phoneNumber,\n        onChange: onChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Log In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), isSendSMS && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"code\",\n        type: \"text\",\n        placeholder: \"\\uC778\\uC99D\\uBC88\\uD638\",\n        required: true,\n        value: codeNumber,\n        onChange: onChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onCodeConfirmClick,\n        value: \"\\uC778\\uC99D\\uBC88\\uD638\\uD655\\uC778\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"recaptcha-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Auth, \"JdKgItmVsOgdl+3gDcPFafHjK5U=\");\n\n_c = Auth;\nexport default Auth;\n\nvar _c;\n\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"sources":["/Users/ming/Desktop/workspace/gongsa/src/routes/Auth.js"],"names":["React","useEffect","useState","authService","RecaptchaVerifier","signInWithPhoneNumber","Auth","phoneNumber","setPhonenumber","codeNumber","setCodeNumber","isSendSMS","setIsSendSms","appVerifier","window","recaptchaVerifier","phoneNumberTest","testVerificationCode","onChanged","event","target","name","value","size","callback","response","onSubmit","preventDefault","languageCode","then","confirmationResult","confirm","catch","error","onCodeConfirmClick","result","user"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { authService } from \"../fbase\";\nimport { RecaptchaVerifier, signInWithPhoneNumber } from \"firebase/auth\";\n\nconst Auth = () => {\n  const [phoneNumber, setPhonenumber] = useState(\"\");\n  const [codeNumber, setCodeNumber] = useState(\"\");\n  const [isSendSMS, setIsSendSms] = useState(\"\");\n  const appVerifier = window.recaptchaVerifier;\n  const phoneNumberTest = \"+16505551234\";\n  const testVerificationCode = \"123456\";\n  const onChanged = (event) => {\n    const {\n      target: { name, value },\n    } = event;\n    if (name === \"phone\") {\n      setPhonenumber(value);\n    } else if (name === \"code\") {\n      setCodeNumber(value);\n    }\n  };\n  useEffect(() => {\n    window.recaptchaVerifier = new RecaptchaVerifier(\n      \"recaptcha-container\",\n      {\n        size: \"invisible\",\n        callback: (response) => {\n          // reCAPTCHA solved, allow signInWithPhoneNumber.\n        },\n      },\n      authService\n    );\n  }, []);\n  const onSubmit = (event) => {\n    event.preventDefault();\n    authService.languageCode = \"ko\";\n    // window.recaptchaVerifier = new RecaptchaVerifier(\n    //   \"recaptcha-container\",\n    //   {},\n    //   authService\n    // );\n    // signInWithPhoneNumber(authService, \"+82\" + phoneNumber, appVerifier)\n    //   .then((confirmationResult) => {\n    //     setIsSendSms(true);\n    //     // SMS sent. Prompt user to type the code from the message, then sign the\n    //     // user in with confirmationResult.confirm(code).\n    //     window.confirmationResult = confirmationResult;\n    //     // ...\n    //   })\n    //   .catch((error) => {\n    //     console.log(error);\n    //     // Error; SMS not sent\n    //     // ...\n    //   });\n    signInWithPhoneNumber(authService, phoneNumberTest, appVerifier)\n      .then(function (confirmationResult) {\n        // confirmationResult can resolve with the fictional testVerificationCode above.\n        return confirmationResult.confirm(testVerificationCode);\n      })\n      .catch(function (error) {\n        // Error; SMS not sent\n        // ...\n      });\n  };\n\n  const onCodeConfirmClick = (event) => {\n    window.confirmationResult\n      .confirm(codeNumber)\n      .then((result) => {\n        // User signed in successfully.\n        const user = result.user;\n        //console.log(user);\n        // ...\n      })\n      .catch((error) => {\n        //console.log(error);\n        // User couldn't sign in (bad verification code?)\n        // ...\n      });\n  };\n  return (\n    <>\n      <form onSubmit={onSubmit}>\n        <input\n          name=\"phone\"\n          type=\"phone\"\n          placeholder=\"'-' 없이 입력\"\n          required\n          value={phoneNumber}\n          onChange={onChanged}\n        />\n        <input type=\"submit\" value=\"Log In\" />\n      </form>\n      {isSendSMS && (\n        <>\n          <input\n            name=\"code\"\n            type=\"text\"\n            placeholder=\"인증번호\"\n            required\n            value={codeNumber}\n            onChange={onChanged}\n          />\n          <button onClick={onCodeConfirmClick} value=\"인증번호확인\" />\n        </>\n      )}\n      <div id=\"recaptcha-container\"></div>\n    </>\n  );\n};\n\nexport default Auth;\n"]},"metadata":{},"sourceType":"module"}