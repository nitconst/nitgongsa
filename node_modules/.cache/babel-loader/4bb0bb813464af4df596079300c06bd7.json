{"ast":null,"code":"var _jsxFileName = \"/Users/ming/Desktop/workspace/gongsa/src/components/Register.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { dbService, storageService } from \"../fbase\";\nimport { collection, addDoc } from \"firebase/firestore\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport EXIF from \"exif-js\";\nimport { ref, uploadString, getDownloadURL } from \"firebase/storage\";\nimport Geocode from \"react-geocode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nGeocode.setApiKey(\"AIzaSyBIWmLYzIJmYLxLoRsHchr0OAErLWpKcyI\");\nGeocode.setLanguage(\"ko\");\nGeocode.setRegion(\"kr\");\nGeocode.enableDebug(); //(보류) 모바일기기 체크박스 -> isIos(삼항연산자)로 조건, 컴포넌트 분리는 추후에\n\nconst Register = _ref => {\n  _s();\n\n  let {\n    userObj\n  } = _ref;\n  const [gongsa, setGongsa] = useState(\"\");\n  const [gongsas, setGongsas] = useState([]);\n  const [attachment, setAttachment] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [GPSla, setGPSLa] = useState([]); //위도\n\n  const [GPSlong, setGPSLong] = useState([]); //경도\n\n  const [address, setAddress] = useState(\"\"); //주소변환\n\n  const meta = useRef(null);\n\n  const onSubmit = async event => {\n    event.preventDefault();\n    let attachmentUrl = \"\";\n\n    if (attachment !== \"\") {\n      const attachmentRef = ref(storageService, `${userObj.uid}/${uuidv4()}`);\n      const response = await uploadString(attachmentRef, attachment, \"data_url\");\n      attachmentUrl = await getDownloadURL(response.ref);\n    } //attachment 유효성검사\n\n\n    if (attachmentUrl == \"\") {\n      alert(\"이미지 파일은 필수입니다.\");\n    }\n\n    const gongsaObj = {\n      text: gongsa,\n      createdAt: date,\n      GPSLatitude: GPSla,\n      GPSLongitude: GPSlong,\n      addr: address,\n      phone: userObj.displayName,\n      createdId: userObj.uid,\n      attachmentUrl,\n      code: 0 // 필드 태그 수정 필요\n\n    };\n    const docRef = await addDoc(collection(dbService, \"gongsa\"), gongsaObj);\n    setGongsa(\"\");\n    setAttachment(\"\");\n    console.log(docRef.id);\n  };\n\n  const onChange = event => {\n    const {\n      target: {\n        value\n      }\n    } = event;\n    setGongsa(value);\n  };\n\n  const onFileChange = event => {\n    const {\n      target: {\n        files\n      }\n    } = event;\n    const theFile = files[0];\n    const reader = new FileReader();\n\n    reader.onloadend = finishedEvent => {\n      const {\n        currentTarget: {\n          result\n        }\n      } = finishedEvent;\n      setAttachment(result);\n    };\n\n    reader.readAsDataURL(theFile);\n    meta.current = theFile;\n\n    if (theFile && theFile.name) {\n      EXIF.getData(theFile, function () {\n        let exifData = EXIF.pretty(this);\n        let gpsLa = EXIF.getTag(this, \"GPSLatitude\");\n        let gpsLaRef = EXIF.getTag(this, \"GPSLatitudeRef\");\n        let gpsLong = EXIF.getTag(this, \"GPSLongitude\");\n        let gpsLongRef = EXIF.getTag(this, \"GPSLongitudeRef\");\n        let la = [];\n        let long = []; //위경도 api 연동 변수\n\n        let a = \"\";\n        let b = \"\";\n\n        if (exifData) {\n          //exifdata 존재 시 gps 계산 수행\n          console.log(exifData);\n          console.log(gpsLa);\n          console.log(gpsLong);\n\n          for (let i = 0; i < gpsLa.length; i++) {\n            la[i] = gpsLa[i].numerator / gpsLa[i].denominator;\n          }\n\n          for (let i = 0; i < gpsLong.length; i++) {\n            long[i] = gpsLong[i].numerator / gpsLong[i].denominator;\n          } //값 확인 콘솔\n\n\n          console.log(la, long, gpsLaRef, gpsLongRef); //사진 시각 정보 설정\n\n          setDate(EXIF.getTag(this, \"DateTime\")); //ref 조건 별 위경도 계산\n\n          if (gpsLaRef == \"N\") {\n            a = parseInt(la[0]) + (60 * parseInt(la[1]) + parseFloat(la[2])) / 3600;\n          } else {\n            a = -1 * parseInt(la[0]) + (-60 * parseInt(la[1]) + -1 * parseFloat(la[2])) / 3600;\n          }\n\n          setGPSLa(a);\n\n          if (gpsLongRef == \"E\") {\n            b = parseInt(long[0]) + (60 * parseInt(long[1]) + parseFloat(long[2])) / 3600;\n          } else {\n            b = -1 * parseInt(long[0]) + (-60 * parseInt(long[1]) + -1 * parseFloat(long[2])) / 3600;\n          }\n\n          setGPSLong(b);\n        } else {\n          console.log(\"No EXIF data found in image '\" + theFile.name + \"'.\");\n        } //주소변환 실행\n\n\n        setFileData(a, b);\n      });\n    }\n  }; //주소변환함수\n\n\n  const setFileData = (a, b) => {\n    console.log(GPSla, GPSlong);\n    Geocode.fromLatLng(String(a), String(b)).then(response => {\n      setAddress(response.results[0].formatted_address);\n      let city, state, country;\n\n      for (const element of response.results[0].address_components) {\n        for (let j = 0; j < element.types.length; j++) {\n          switch (element.types[j]) {\n            case \"locality\":\n              city = element.long_name;\n              break;\n\n            case \"administrative_area_level_1\":\n              state = element.long_name;\n              break;\n\n            case \"country\":\n              country = element.long_name;\n              break;\n          }\n        }\n      }\n\n      console.log(city, state, country);\n    }, error => {\n      console.error(error);\n    });\n  };\n\n  const onClearAttachment = () => {\n    setAttachment(null);\n    fileInput.current.value = null;\n  };\n\n  const fileInput = useRef();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uBBFC\\uC815\\uC528 Component\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: gongsa,\n        onChange: onChange,\n        type: \"text\",\n        placeholder: \"\\uACF5\\uC0AC \\uC81C\\uBAA9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: onFileChange,\n        ref: fileInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), attachment && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: attachment,\n          width: \"50px\",\n          height: \"50px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClearAttachment,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this), console.log(meta), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), \"Time : \", date, /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), \"GPSLatitude : \", GPSla, /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), \"GPSLongitude : \", GPSlong, /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), \"Addr : \", address]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Register, \"t2qN5u2Ai958ZNkzdX5i5RQ5WJE=\");\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/ming/Desktop/workspace/gongsa/src/components/Register.js"],"names":["React","useEffect","useRef","useState","dbService","storageService","collection","addDoc","v4","uuidv4","EXIF","ref","uploadString","getDownloadURL","Geocode","setApiKey","setLanguage","setRegion","enableDebug","Register","userObj","gongsa","setGongsa","gongsas","setGongsas","attachment","setAttachment","date","setDate","GPSla","setGPSLa","GPSlong","setGPSLong","address","setAddress","meta","onSubmit","event","preventDefault","attachmentUrl","attachmentRef","uid","response","alert","gongsaObj","text","createdAt","GPSLatitude","GPSLongitude","addr","phone","displayName","createdId","code","docRef","console","log","id","onChange","target","value","onFileChange","files","theFile","reader","FileReader","onloadend","finishedEvent","currentTarget","result","readAsDataURL","current","name","getData","exifData","pretty","gpsLa","getTag","gpsLaRef","gpsLong","gpsLongRef","la","long","a","b","i","length","numerator","denominator","parseInt","parseFloat","setFileData","fromLatLng","String","then","results","formatted_address","city","state","country","element","address_components","j","types","long_name","error","onClearAttachment","fileInput"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { dbService, storageService } from \"../fbase\";\nimport { collection, addDoc } from \"firebase/firestore\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport EXIF from \"exif-js\";\nimport { ref, uploadString, getDownloadURL } from \"firebase/storage\";\nimport Geocode from \"react-geocode\";\n\nGeocode.setApiKey(\"AIzaSyBIWmLYzIJmYLxLoRsHchr0OAErLWpKcyI\");\nGeocode.setLanguage(\"ko\");\nGeocode.setRegion(\"kr\");\nGeocode.enableDebug();\n\n//(보류) 모바일기기 체크박스 -> isIos(삼항연산자)로 조건, 컴포넌트 분리는 추후에\n\nconst Register = ({ userObj }) => {\n  const [gongsa, setGongsa] = useState(\"\");\n  const [gongsas, setGongsas] = useState([]);\n  const [attachment, setAttachment] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [GPSla, setGPSLa] = useState([]); //위도\n  const [GPSlong, setGPSLong] = useState([]); //경도\n  const [address, setAddress] = useState(\"\"); //주소변환\n\n  const meta = useRef(null);\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    let attachmentUrl = \"\";\n\n    if (attachment !== \"\") {\n      const attachmentRef = ref(storageService, `${userObj.uid}/${uuidv4()}`);\n      const response = await uploadString(\n        attachmentRef,\n        attachment,\n        \"data_url\"\n      );\n      attachmentUrl = await getDownloadURL(response.ref);\n    }\n    //attachment 유효성검사\n    if (attachmentUrl == \"\") {\n      alert(\"이미지 파일은 필수입니다.\");\n    }\n\n    const gongsaObj = {\n      text: gongsa,\n      createdAt: date,\n      GPSLatitude: GPSla,\n      GPSLongitude: GPSlong,\n      addr: address,\n      phone: userObj.displayName,\n      createdId: userObj.uid,\n      attachmentUrl,\n      code: 0,\n\n      // 필드 태그 수정 필요\n    };\n\n    const docRef = await addDoc(collection(dbService, \"gongsa\"), gongsaObj);\n    setGongsa(\"\");\n    setAttachment(\"\");\n\n    console.log(docRef.id);\n  };\n\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setGongsa(value);\n  };\n\n  const onFileChange = (event) => {\n    const {\n      target: { files },\n    } = event;\n    const theFile = files[0];\n    const reader = new FileReader();\n    reader.onloadend = (finishedEvent) => {\n      const {\n        currentTarget: { result },\n      } = finishedEvent;\n      setAttachment(result);\n    };\n    reader.readAsDataURL(theFile);\n    meta.current = theFile;\n\n    if (theFile && theFile.name) {\n      EXIF.getData(theFile, function () {\n        let exifData = EXIF.pretty(this);\n        let gpsLa = EXIF.getTag(this, \"GPSLatitude\");\n        let gpsLaRef = EXIF.getTag(this, \"GPSLatitudeRef\");\n        let gpsLong = EXIF.getTag(this, \"GPSLongitude\");\n        let gpsLongRef = EXIF.getTag(this, \"GPSLongitudeRef\");\n\n        let la = [];\n        let long = [];\n\n        //위경도 api 연동 변수\n        let a = \"\";\n        let b = \"\";\n\n        if (exifData) {\n          //exifdata 존재 시 gps 계산 수행\n          console.log(exifData);\n          console.log(gpsLa);\n          console.log(gpsLong);\n          for (let i = 0; i < gpsLa.length; i++) {\n            la[i] = gpsLa[i].numerator / gpsLa[i].denominator;\n          }\n          for (let i = 0; i < gpsLong.length; i++) {\n            long[i] = gpsLong[i].numerator / gpsLong[i].denominator;\n          }\n\n          //값 확인 콘솔\n          console.log(la, long, gpsLaRef, gpsLongRef);\n\n          //사진 시각 정보 설정\n          setDate(EXIF.getTag(this, \"DateTime\"));\n\n          //ref 조건 별 위경도 계산\n          if (gpsLaRef == \"N\") {\n            a =\n              parseInt(la[0]) +\n              (60 * parseInt(la[1]) + parseFloat(la[2])) / 3600;\n          } else {\n            a =\n              -1 * parseInt(la[0]) +\n              (-60 * parseInt(la[1]) + -1 * parseFloat(la[2])) / 3600;\n          }\n          setGPSLa(a);\n\n          if (gpsLongRef == \"E\") {\n            b =\n              parseInt(long[0]) +\n              (60 * parseInt(long[1]) + parseFloat(long[2])) / 3600;\n          } else {\n            b =\n              -1 * parseInt(long[0]) +\n              (-60 * parseInt(long[1]) + -1 * parseFloat(long[2])) / 3600;\n          }\n          setGPSLong(b);\n        } else {\n          console.log(\"No EXIF data found in image '\" + theFile.name + \"'.\");\n        }\n        //주소변환 실행\n        setFileData(a, b);\n      });\n    }\n  };\n\n  //주소변환함수\n  const setFileData = (a, b) => {\n    console.log(GPSla, GPSlong);\n    Geocode.fromLatLng(String(a), String(b)).then(\n      (response) => {\n        setAddress(response.results[0].formatted_address);\n        let city, state, country;\n        for (const element of response.results[0].address_components) {\n          for (let j = 0; j < element.types.length; j++) {\n            switch (element.types[j]) {\n              case \"locality\":\n                city = element.long_name;\n                break;\n              case \"administrative_area_level_1\":\n                state = element.long_name;\n                break;\n              case \"country\":\n                country = element.long_name;\n                break;\n            }\n          }\n        }\n        console.log(city, state, country);\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n  };\n\n  const onClearAttachment = () => {\n    setAttachment(null);\n    fileInput.current.value = null;\n  };\n\n  const fileInput = useRef();\n\n  return (\n    <div>\n      <h2>민정씨 Component</h2>\n      <form onSubmit={onSubmit}>\n        <textarea\n          value={gongsa}\n          onChange={onChange}\n          type=\"text\"\n          placeholder=\"공사 제목\"\n        />\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={onFileChange}\n          ref={fileInput}\n        />\n        <hr />\n        <input type=\"submit\" value=\"submit\" />\n        {attachment && (\n          <div>\n            <img src={attachment} width=\"50px\" height=\"50px\" />\n            <button onClick={onClearAttachment}>Clear</button>\n          </div>\n        )}\n        {console.log(meta)}\n        <hr />\n        Time : {date}\n        <hr />\n        GPSLatitude : {GPSla}\n        <hr />\n        GPSLongitude : {GPSlong}\n        <hr />\n        Addr : {address}\n      </form>\n    </div>\n  );\n};\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}